{
  "_args": [
    [
      "daggy@0.0.x",
      "/home/gael/Documents/trial-fp/node_modules/fantasy-land"
    ]
  ],
  "_from": "daggy@>=0.0.0 <0.1.0",
  "_id": "daggy@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/daggy",
  "_npmUser": {
    "email": "brian@brianmckenna.org",
    "name": "puffnfresh"
  },
  "_npmVersion": "1.2.23",
  "_phantomChildren": {},
  "_requested": {
    "name": "daggy",
    "raw": "daggy@0.0.x",
    "rawSpec": "0.0.x",
    "scope": null,
    "spec": ">=0.0.0 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fantasy-land"
  ],
  "_resolved": "https://registry.npmjs.org/daggy/-/daggy-0.0.1.tgz",
  "_shasum": "ae9c932c9f7136e655a04afb21e8baadfd0d3707",
  "_shrinkwrap": null,
  "_spec": "daggy@0.0.x",
  "_where": "/home/gael/Documents/trial-fp/node_modules/fantasy-land",
  "author": {
    "name": "Brian McKenna"
  },
  "bugs": {
    "url": "https://github.com/puffnfresh/daggy/issues"
  },
  "dependencies": {},
  "description": "Library for creating tagged constructors.",
  "devDependencies": {
    "emu": "0.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "ae9c932c9f7136e655a04afb21e8baadfd0d3707",
    "tarball": "https://registry.npmjs.org/daggy/-/daggy-0.0.1.tgz"
  },
  "homepage": "https://github.com/puffnfresh/daggy#readme",
  "keywords": [
    "constructor"
  ],
  "license": "MIT",
  "main": "daggy.js",
  "maintainers": [
    {
      "name": "puffnfresh",
      "email": "brian@brianmckenna.org"
    }
  ],
  "name": "daggy",
  "optionalDependencies": {},
  "readme": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n  <meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <title></title>\n  <style type=\"text/css\">code{white-space: pre;}</style>\n  <style type=\"text/css\">\ntable.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {\n  margin: 0; padding: 0; vertical-align: baseline; border: none; }\ntable.sourceCode { width: 100%; line-height: 100%; }\ntd.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }\ntd.sourceCode { padding-left: 5px; }\ncode > span.kw { color: #007020; font-weight: bold; }\ncode > span.dt { color: #902000; }\ncode > span.dv { color: #40a070; }\ncode > span.bn { color: #40a070; }\ncode > span.fl { color: #40a070; }\ncode > span.ch { color: #4070a0; }\ncode > span.st { color: #4070a0; }\ncode > span.co { color: #60a0b0; font-style: italic; }\ncode > span.ot { color: #007020; }\ncode > span.al { color: #ff0000; font-weight: bold; }\ncode > span.fu { color: #06287e; }\ncode > span.er { color: #ff0000; font-weight: bold; }\n  </style>\n</head>\n<body>\n<h1 id=\"daggy\">Daggy</h1>\n<p>Library for creating tagged constructors.</p>\n<h2 id=\"daggy.getinstanceself-constructor\"><code>daggy.getInstance(self, constructor)</code></h2>\n<p>Returns <code>self</code> if it's an <code>instanceof constructor</code>, otherwise creates a new object with <code>constructor</code>'s prototype.</p>\n<p>Allows creating constructors that can be used with or without the new keyword but always have the correct prototype.</p>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">function</span> <span class=\"fu\">WrappedArray</span>() {\n    <span class=\"kw\">var</span> self = <span class=\"ot\">daggy</span>.<span class=\"fu\">getInstance</span>(<span class=\"kw\">this</span>, WrappedArray);\n    <span class=\"ot\">self</span>.<span class=\"fu\">_array</span> = [].<span class=\"ot\">slice</span>.<span class=\"fu\">apply</span>(arguments);\n    <span class=\"kw\">return</span> self;\n}\n<span class=\"kw\">new</span> <span class=\"fu\">WrappedArray</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>) <span class=\"kw\">instanceof</span> WrappedArray; <span class=\"co\">// true</span>\n<span class=\"fu\">WrappedArray</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>) <span class=\"kw\">instanceof</span> WrappedArray; <span class=\"co\">// true</span></code></pre>\n<h2 id=\"daggy.taggedarguments\"><code>daggy.tagged(arguments)</code></h2>\n<p>Creates a new constructor with the given field names as arguments and properties. Allows <code>instanceof</code> checks with returned constructor.</p>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> Tuple3 = <span class=\"ot\">daggy</span>.<span class=\"fu\">tagged</span>(<span class=\"st\">&#39;x&#39;</span>, <span class=\"st\">&#39;y&#39;</span>, <span class=\"st\">&#39;z&#39;</span>);\n\n<span class=\"kw\">var</span> _123 = <span class=\"fu\">Tuple3</span>(<span class=\"dv\">1</span>, <span class=\"dv\">2</span>, <span class=\"dv\">3</span>); <span class=\"co\">// optional new keyword</span>\n<span class=\"ot\">_123</span>.<span class=\"fu\">x</span> == <span class=\"dv\">1</span> &amp;&amp; <span class=\"ot\">_123</span>.<span class=\"fu\">y</span> == <span class=\"dv\">2</span> &amp;&amp; <span class=\"ot\">_123</span>.<span class=\"fu\">z</span> == <span class=\"dv\">3</span>; <span class=\"co\">// true</span>\n_123 <span class=\"kw\">instanceof</span> Tuple3; <span class=\"co\">// true</span></code></pre>\n<h2 id=\"daggy.taggedsumconstructors\"><code>daggy.taggedSum(constructors)</code></h2>\n<p>Creates a constructor for each key in <code>constructors</code>. Returns a function with each constructor as a property. Allows <code>instanceof</code> checks for each constructor and the returned function.</p>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> Option = <span class=\"ot\">daggy</span>.<span class=\"fu\">taggedSum</span>({\n    <span class=\"dt\">Some</span>: [<span class=\"st\">&#39;x&#39;</span>],\n    <span class=\"dt\">None</span>: []\n});\n\n<span class=\"ot\">Option</span>.<span class=\"fu\">Some</span>(<span class=\"dv\">1</span>) <span class=\"kw\">instanceof</span> <span class=\"ot\">Option</span>.<span class=\"fu\">Some</span>; <span class=\"co\">// true</span>\n<span class=\"ot\">Option</span>.<span class=\"fu\">Some</span>(<span class=\"dv\">1</span>) <span class=\"kw\">instanceof</span> Option; <span class=\"co\">// true</span>\n<span class=\"ot\">Option</span>.<span class=\"fu\">None</span> <span class=\"fu\">instanceof</span> <span class=\"fu\">Option</span>; <span class=\"co\">// true</span>\n\n<span class=\"kw\">function</span> <span class=\"fu\">incOrZero</span>(o) {\n    <span class=\"kw\">return</span> <span class=\"ot\">o</span>.<span class=\"fu\">cata</span>({\n        <span class=\"dt\">Some</span>: <span class=\"kw\">function</span>(x) {\n            <span class=\"kw\">return</span> x + <span class=\"dv\">1</span>;\n        },\n        <span class=\"dt\">None</span>: <span class=\"kw\">function</span>() {\n            <span class=\"kw\">return</span> <span class=\"dv\">0</span>;\n        }\n    });\n}\n<span class=\"fu\">incOrZero</span>(<span class=\"ot\">Option</span>.<span class=\"fu\">Some</span>(<span class=\"dv\">1</span>)); <span class=\"co\">// 2</span>\n<span class=\"fu\">incOrZero</span>(<span class=\"ot\">Option</span>.<span class=\"fu\">None</span>); <span class=\"co\">// 0</span></code></pre>\n</body>\n</html>\n",
  "readmeFilename": "README.htm",
  "repository": {
    "type": "git",
    "url": "git://github.com/puffnfresh/daggy.git"
  },
  "scripts": {},
  "version": "0.0.1"
}
