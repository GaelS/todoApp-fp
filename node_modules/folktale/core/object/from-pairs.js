"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

//----------------------------------------------------------------------
//
// This source file is part of the Folktale project.
//
// See LICENCE for licence information.
// See CONTRIBUTORS for the list of contributors to the project.
//
//----------------------------------------------------------------------

var define = Object.defineProperty;

/*~
 * Constructs an object from an array of (key, value) pairs.
 *
 *     fromPairs([['x', 10], ['y', 20]]);
 *     // => { x: 10, y: 20 }
 *
 * The resulting object is a plain JavaScript object, inheriting from
 * `Object.prototype`.
 *
 * The pairs are added to the object with `Object.defineProperty`, so no setters
 * defined in `Object.prototype` will be triggered during the process. All
 * properties are enumerable, writable, and configurable.
 *
 * Properties are inserted in the object in the same order of the array. In an
 * ECMAScript 2015-compliant engine this means that the following equivalence
 * holds:
 *
 *     Object.keys(fromPairs(xs)) === xs.map(([k, v]) => k)
 *
 * ---------------------------------------------------------------------
 * name        : fromPairs
 * module      : folktale/core/object/from-pairs
 * copyright   : (c) 2015-2016 Quildreen Motta, and CONTRIBUTORS
 * licence     : MIT
 * repository  : https://github.com/origamitower/folktale
 *
 * category    : Converting
 * stability   : stable
 * portability : portable
 * platforms:
 *   - ECMAScript 5
 *   - ECMAScript 3, with es5-shim
 *
 * maintainers:
 *   - Quildreen Motta <queen@robotlolita.me>
 *
 * authors:
 *   - Quildreen Motta
 *
 * complexity : O(n), n is the length of the array
 * signature  : fromPairs(pairs)
 * type: |
 *   (Array (String or Symbol, 'a)) => Object 'a
 */
var fromPairs = function fromPairs(pairs) {
  return pairs.reduce(function (r, _ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var k = _ref2[0];
    var v = _ref2[1];
    return define(r, k, { value: v,
      writable: true,
      enumerable: true,
      configurable: true
    });
  }, {});
};

fromPairs[Symbol.for("@@meta:magical")] = {
  "name": "fromPairs",
  "module": "folktale/core/object/from-pairs",
  "copyright": "(c) 2015-2016 Quildreen Motta, and CONTRIBUTORS",
  "licence": "MIT",
  "repository": "https://github.com/origamitower/folktale",
  "category": "Converting",
  "stability": "stable",
  "portability": "portable",
  "platforms": ["ECMAScript 5", "ECMAScript 3, with es5-shim"],
  "maintainers": ["Quildreen Motta <queen@robotlolita.me>"],
  "authors": ["Quildreen Motta"],
  "complexity": "O(n), n is the length of the array",
  "signature": "fromPairs(pairs)",
  "type": "(Array (String or Symbol, 'a)) => Object 'a\n",
  "documentation": "\nConstructs an object from an array of (key, value) pairs.\n\n    fromPairs([['x', 10], ['y', 20]]);\n    // => { x: 10, y: 20 }\n\nThe resulting object is a plain JavaScript object, inheriting from\n`Object.prototype`.\n\nThe pairs are added to the object with `Object.defineProperty`, so no setters\ndefined in `Object.prototype` will be triggered during the process. All\nproperties are enumerable, writable, and configurable.\n\nProperties are inserted in the object in the same order of the array. In an\nECMAScript 2015-compliant engine this means that the following equivalence\nholds:\n\n    Object.keys(fromPairs(xs)) === xs.map(([k, v]) => k)\n"
};
module.exports = fromPairs;