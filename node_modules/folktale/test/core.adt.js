'use strict';

//----------------------------------------------------------------------
//
// This source file is part of the Folktale project.
//
// Copyright (C) 2015-2016 Quildreen Motta.
// Licensed under the MIT licence.
//
// See LICENCE for licence information.
// See CONTRIBUTORS for the list of contributors to the project.
//
//----------------------------------------------------------------------

var _require = require('jsverify');

var property = _require.property;
var forall = _require.forall;

var _require2 = require('../core/adt/');

var data = _require2.data;
var setoid = _require2.setoid;


describe('Data.ADT.derive', function () {
  describe('Setoid', function () {
    var _data$derive = data('AB', {
      A: function A(value) {
        return { value: value };
      },
      B: function B(value) {
        return { value: value };
      }
    }).derive(setoid);

    var A = _data$derive.A;
    var B = _data$derive.B;


    property('Different simple values are NOT equal', 'json', function (a) {
      return !A(a).equals(B(a));
    });
    property('Different composite values are NOT equal', 'json', function (a) {
      return !A(B(a)).equals(A(a));
    });
    property('Similar simple values are equal', 'json', function (a) {
      return A(a).equals(A(a));
    });
    property('Similar composite values are equal', 'json', function (a) {
      return A(B(a)).equals(A(B(a)));
    });

    describe('Setoid#withEquality', function () {
      var _data$derive2 = data('A', {
        A: function A(value) {
          return { value: value };
        }
      }).derive(setoid.withEquality(function (a, b) {
        return a.id === b.id;
      }));

      var A = _data$derive2.A;


      property('Values are compared using a custom function if provided', 'json', 'json', function (a, b) {
        return A({ id: 1, _irrelevantValue: a }).equals(A({ id: 1, _irrelevantValue: b }));
      });
    });
  });
});